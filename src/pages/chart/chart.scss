page-chart ion-content {
  background: linear-gradient(180deg, #c5cbff, #58bdfe);
  background-size: 150% 150%;
  -webkit-animation: AnimationName 20s ease infinite;
  -moz-animation: AnimationName 20s ease infinite;
  -o-animation: AnimationName 20s ease infinite;
  animation: AnimationName 20s ease infinite;
  @-webkit-keyframes AnimationName {
      0%{background-position:13% 0%}
      50%{background-position:88% 100%}
      100%{background-position:13% 0%}
  }
  @-moz-keyframes AnimationName {
      0%{background-position:13% 0%}
      50%{background-position:88% 100%}
      100%{background-position:13% 0%}
  }
  @-o-keyframes AnimationName {
      0%{background-position:13% 0%}
      50%{background-position:88% 100%}
      100%{background-position:13% 0%}
  }
  @keyframes AnimationName {
      0%{background-position:13% 0%}
      50%{background-position:88% 100%}
      100%{background-position:13% 0%}
  }

  &.stage-1 {
    background: linear-gradient(180deg, #c5cbff, #58bdfe);
  }

  &.stage-2 {
    background: linear-gradient(180deg, #d2e26d, #23c3c0);
  }

  &.stage-3{
    background: linear-gradient(180deg, #fdc777, #fd595b);
  }
  /* To Fit in smaller screensize */
  ion-grid.main {
    @media (max-width: 375px) { 
        transform: scale(0.9, 0.9) translate(0px, -50px);
    }
  }

  ion-grid.add-button-footer {
    @media (max-width: 375px) { 
        transform: scale(0.9, 0.9);
    }
  }

}

page-chart p,
page-chart h1,
page-chart h2,
page-chart h3,
page-chart h4,
page-chart h5 {
    color: #fff;
  }

  .ios, .md {
    page-chart {
      .scroll-content {
        /*background-color: map-get($colors, light);*/
      }
   
      ion-card-header {
        font-weight: bold;
      }
    }
   
    h3.title {
      color: #fff;
      font-weight: 300;
      font-size: 1.8rem;
      margin-top: 1.0rem;
      margin-bottom: 1.0rem;
    }

  .today-date {
    font-weight: 600;
  }

  button.add-intake {
    background: none;
    cursor: pointer;
    img {
      height:57px;
      width:57px;
    }

    &:hover {
      opacity: 0.7;
    };
  }

  i.icon.barcode {
    display: inline-block;
    height: 57px;
    width: 57px;
    background-image: url('../assets/img/scan-barcode.png');
    background-size: contain;
    background-repeat: no-repeat;
  }

  .summary {
    margin-top: -68px;
    text-align: center;

    .gram {
      i.icon.sugar {
        display: inline-block;
        height: 0.8em;
        width: 0.8em;
        margin-right: 4px;
        background-image: url('../assets/img/home-sugar.png');
        background-size: contain;
        background-repeat: no-repeat;
      }
      font-weight: 600;
      font-size: 2.8em;
    }
    .gram-unit {
      font-weight: 400;
      font-size: 2.2em;
    }
  }

  i.icon.drinks {
    display: inline-block;
    position: relative;
    top: 0.8em;
    height: 2.4em;
    width: 2.4em;
    margin-right: 2px;
    background-image: url('../assets/img/home-drink.png');
    background-size: contain;
    background-repeat: no-repeat;
  }

  .coke-count {
    line-height: 2.4em;
  }

  i.icon.equal {
    display: inline-block;
    height: 16px;
    width: 16px;
    margin-top: 16px;
    background-image: url('../assets/img/equal.png');
    background-size: contain;
    background-repeat: no-repeat;
  }

  .today-intake {
    color: rgba(255,255,255, 0.8);
    font-weight: 300;
  }

  div.level-image {
    display: block;
    width:375px;
    height: 320px;
    margin: auto;
    margin-top: -300px;
    max-width: 100%;
    transform: translatey(0px);
    animation: float 8s ease-in-out infinite;
    background-size: contain;
    background-image: url('../assets/img/surgar-graphic-level1.png');
    background-repeat: no-repeat;

    &.stage-1 {
      background-image: url('../assets/img/surgar-graphic-level1.png');
    }

    &.stage-2 {
      background-image: url('../assets/img/surgar-graphic-level2.png');
    }

    &.stage-3{
      background-image: url('../assets/img/surgar-graphic-level3.png');
    }
  }

  /* Floating effect */
  @keyframes float {
    0% {
      transform: translatey(0px);
    }
    50% {

      transform: translatey(-20px);
    }
    100% {
      transform: translatey(0px);
    }
  }

  figure.doughnut-chart {
    margin: auto;
  }


/* Chart */
  $configs: (
  doughnut-chart: (
    svgSize: 300px,
    percentage: 0,
    strokeWidth: 4px,
    outerStrokeWidth: 8px,
    backgroundColor: rgba(255,255,255, 0.5),
    foregroundColor: #b1fe2e,
    labelColor: rgba(255,255,255, 0.9),
    labelFontSize: 2.5rem,
    duration: 1s,
    animationDelay: 0.5s
  )
  );


  /* ------- DO NOT EDIT BELOW --------- */
  $pi: 3.14;
  $labelData: '';
  @for $i from 0 to 101 {
    $labelData: $labelData + $i + '%' + '\a';
  }

  @each $chart, $param in $configs {
    
    $c: (map-get($param, svgSize) - map-get($param, strokeWidth)) * $pi;
    $cOffSet: (map-get($param, percentage)/100*0.8)*$c;

    /*f and fOffset is used for segmented circle*/
    $f: (map-get($param, svgSize) - map-get($param, outerStrokeWidth)) * $pi;
    $fOffSet: (80/100)*$f; 
    
    .#{$chart} {
      width: map-get($param, svgSize);
      height: map-get($param, svgSize);
      margin: 0;
      position: relative;
      
      &.animate {
        svg .circle-foreground {
          animation-duration: map-get($param, duration);
          animation-timing-function: ease-in-out;
          animation-fill-mode: both;
          animation-name: offset;
          animation-delay: map-get($param, animationDelay);
          animation-iteration-count: 1;
        }
        figcaption:after {
          /*animation: #{$chart}-label map-get($param, duration) steps(map-get($param, percentage)) forwards;*/
          /*animation: #{$chart}-label map-get($param, duration) steps(map-get($param, percentage)) forwards;*/
          /*animation-delay: map-get($param, animationDelay);*/
        }
      }

      svg {
        width: 100%;
        height: 100%;
        .circle-background {
          r: (map-get($param, svgSize) - map-get($param, outerStrokeWidth))/2;
          cx: 50%;
          cy: 50%;
          fill: none;
          stroke: map-get($param, backgroundColor);
          stroke-width: map-get($param, strokeWidth);
          stroke-dasharray: $fOffSet $f;
          stroke-dashoffset: 0;
          transform-origin: 50% 50%;
          transform: rotate(128deg);
          stroke-linecap: round;
          
        }
        .circle-foreground {
          @extend .circle-background;
          stroke-width: map-get($param, outerStrokeWidth);
          stroke: map-get($param, foregroundColor);
          stroke-dasharray: $cOffSet $c;
          stroke-dashoffset: $cOffSet;
          stroke-linecap: round;
        }
      }
      figcaption {
        display: inline-block;
        width: 100%;
        height: map-get($param, labelFontSize);
        overflow: hidden;
        text-align: center;
        color: map-get($param, labelColor);
        position: absolute;
        top: calc(100% - #{map-get($param, labelFontSize)/2});
        left: 0;
        font-size: 0;
        &:after {
          /*display: inline-block;
          content: $labelData;
          white-space: pre;
          font-size: map-get($param, labelFontSize);
          line-height: map-get($param, labelFontSize);*/
        }
      }
    }
    @keyframes #{$chart}-label {
      100% {
        transform: translateY(map-get($param, labelFontSize) * (-(map-get($param, percentage))));
      }
    }
  }
  @keyframes offset {
    100% {
      stroke-dashoffset: 0;
    }
  }

  .doughnut-chart {
    &.stage-2 svg .circle-foreground {
        stroke: rgb(255, 250, 109);
    }

    &.stage-3 svg .circle-foreground {
        stroke: rgb(253, 26, 32);
    }
  }

  .add-button-footer {
    background: transparent;
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
  }

}